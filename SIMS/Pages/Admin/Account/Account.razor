@page "/admin/account-management"
@layout SIMS.Shared.Layouts.MainLayout
@using SIMS.Shared.Models
@using System.Text.Json;
@using SIMS.Data.Entities.Admin;
@using SIMS.Shared.Components
@inject SIMS.Shared.Services.HeaderTitleService HeaderTitleService
@inject SIMS.Shared.Functions.DatabaseInteractionFunctions DatabaseFunctions
@inject ILogger<Account> Logger
@inject NavigationManager Navigation

<PageTitle>Account</PageTitle>

@if (accounts != null)
{
    <Filter Filters="@filters" Items="@accounts" FilteredItemsChanged="@FilteredItemsChangedCallback" />
    @if (filtered != null && filtered.Any())
    {
        <Table Data="@filtered" Columns="@columns" OnDataUpdated="LoadData" />
    }
    else
    {
        <Table Data="@accounts" Columns="@columns" OnDataUpdated="LoadData" />
    }
}
else
{
    <Loading />
}

@code {
    private string HeaderTitle = "Account";
    private IEnumerable<Accounts> accounts;
    private List<TableColumn<Accounts>> columns;
    private List<Filters<Accounts>> filters = new List<Filters<Accounts>>();
    private List<Accounts> filtered;

    private EventCallback<IEnumerable<Accounts>> FilteredItemsChangedCallback =>
        EventCallback.Factory.Create<IEnumerable<Accounts>>(this, UpdateFilteredItems);

    private void UpdateFilteredItems(IEnumerable<Accounts> filteredItems)
    {
        filtered = filteredItems.ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        HeaderTitleService.Title = HeaderTitle;
        await LoadData();
        await LoadFilters();
    }

    private async Task LoadData()
    {
        accounts = await DatabaseFunctions.LoadData<Accounts>("api/Admin/GetAccount");

        columns = new List<TableColumn<Accounts>>
        {
            new TableColumn<Accounts> { Header = "Member Code", Value = acc => acc.MemberCode },
            new TableColumn<Accounts> { Header = "Email", Value = acc => acc.Email },
            new TableColumn<Accounts> { Header = "Name", Value = acc => acc.Name },
            new TableColumn<Accounts> { Header = "Role", Value = acc => acc.Role, IsFilter = true },
            new TableColumn<Accounts> { Header = "Created At", Value = acc => acc.CreatedAt },
            new TableColumn<Accounts> { Header = "Updated At", Value = acc => acc.UpdatedAt },
        };
    }

    private async Task LoadFilters()
    {
        foreach (var column in columns.Where(c => c.IsFilter))
        {
            var filterData = await DatabaseFunctions.LoadData<string>($"api/Admin/Get{column.Header.Replace(" ", "")}Filter");
            if (filterData != null)
            {
                filters.Add(new Filters<Accounts>
                    {
                        Header = column.Header,
                        Options = filterData.ToList()
                    });
            }
        }
    }
}
