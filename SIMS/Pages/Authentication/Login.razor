@page "/login"

@layout SIMS.Shared.Layouts.SubLayout

@using Microsoft.AspNetCore.Authentication
@using SIMS.Shared.Components
@using SIMS.Shared.Layouts
@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json;
@using SIMS.Shared.Functions
@using SIMS.Shared.Services
@using SIMS.Shared.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing 

@inject SIMS.Shared.Services.AuthenticationService AuthService
@inject HeaderTitleService HeaderTitleService


<PageTitle>Login</PageTitle>

<div class="container">
    <div class="logo">
        <Logo />
    </div>

    <h2 class="title">Welcome Back!</h2>

    <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="form">
            <div class="form-field">
                <label for="email" class="form-label">Email</label>
                <input type="email" class="form-input" id="email" @bind="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" style="color: red;" />
            </div>
            <div class="form-field">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-input" id="password" @bind="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" style="color: red;"/>
            </div>
            <button type="submit" class="primary-button">Login</button>
        </div>
    </EditForm>
    @if (loginError != null)
    {
        <div class="error-message" style="color: red;">@loginError</div>
    }
</div>

@code {
    private LoginRequest loginModel = new LoginRequest();
    private string loginError;

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private DatabaseInteractionFunctions DatabaseFunctions { get; set; }


    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await DatabaseFunctions.ValidateUserAsync(loginModel);

            if (response.Successful)
            {
                var userAvatar = response.UserInfo.OfficialAvatar;

                HeaderTitleService.OfficialAvatar = userAvatar;

                string role = response.UserInfo.RoleName.ToLower();

                NavigationManager.NavigateTo(role switch
                {
                    "admin" => "/admin/",
                    "student" => "/student/",
                    "lecturer" => "/lecturer/",
                    _ => "/unauthorized"
                });
            }
            else
            {
                loginError = response.Error ?? "Login failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            loginError = $"An unexpected error occurred: {ex.Message}";
            Console.WriteLine(ex);
        }
    }

}
