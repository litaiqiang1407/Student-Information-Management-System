@typeparam TItem
@using SIMS.Shared.Models
@using System.Text.Json
@inject ILogger<TItem> Logger

<div class="container">
    <div class="filter-container row">
        <div class="filter col col-lg-6">
            <button class="filter-button">
                <i class="bi bi-funnel filter-icon"></i>
                <span class="filter-label">Filter</span>
            </button>

            @foreach (var filter in Filters)
            {
                <div class="filter-item-wrapper">
                    <button class="filter-item filter-button @(IsFilterShown(filter.Header) ? "active" : "")" @onclick="() => ShowFilterItem(filter.Header)">
                        <span class="filter-label">@filter.Header</span>
                        <i class="@(GetFilterIcon(filter.Header)) show-icon"></i>
                    </button>
                    <div class="filter-select-wrapper @(IsFilterShown(filter.Header) ? "show" : "hide")">
                        <ul class="filter-select">
                            @foreach (var option in filter.Options)
                            {
                                <li class="filter-option">
                                    <input type="checkbox" id="@($"checkbox-{filter.Header}-{option}")" class="filter-checkbox"
                                           value="@option" @onchange="() => OnOptionChanged(filter, option)" />

                                    <label for="@($"checkbox-{filter.Header}-{option}")" class="filter-label">@option</label>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }
        </div>
        <div class="search col col-lg-6">
            <div class="search-field">
                <i class="bi bi-search search-icon"></i>
                <input type="text" class="search-input" placeholder="Search for anything....." @bind="searchText" @oninput="OnSearchInput" />
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<Filters<TItem>> Filters { get; set; } 

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<TItem>> FilteredItemsChanged { get; set; }

    private List<TItem> filteredItems;
    private string searchText = "";

    private Dictionary<string, bool> showFilters = new Dictionary<string, bool>();

    private Dictionary<string, List<string>> selectedOptions = new Dictionary<string, List<string>>();

    private void ShowFilterItem(string header)
    {
        if (showFilters.ContainsKey(header))
        {
            showFilters[header] = !showFilters[header];
        }
        else
        {
            showFilters[header] = true;
        }
    }

    private bool IsFilterShown(string header)
    {
        return showFilters.ContainsKey(header) && showFilters[header];
    }

    private string GetFilterIcon(string header)
    {
        return IsFilterShown(header) ? "bi bi-caret-up-fill" : "bi bi-caret-down-fill";
    }

    protected override void OnInitialized()
    {
        if (Items != null)
        {
            filteredItems = Items.ToList();
        }
    }

    private async Task OnSearchInput(ChangeEventArgs args)
    {
        searchText = args.Value.ToString();
        await Task.Delay(300);
        ApplySearch();
    }

    private void OnOptionChanged(Filters<TItem> filter, string option)
    {
        if (!selectedOptions.ContainsKey(filter.Header))
        {
            selectedOptions[filter.Header] = new List<string>();
        }

        if (selectedOptions[filter.Header].Contains(option))
        {
            selectedOptions[filter.Header].Remove(option);
        }
        else
        {
            selectedOptions[filter.Header].Add(option);
        }

        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (Items == null)
        {
            filteredItems = new List<TItem>();
            return;
        }

        filteredItems = Items.Where(item =>
        {
            foreach (var filter in Filters)
            {
                if (selectedOptions.ContainsKey(filter.Header) && selectedOptions[filter.Header].Count > 0)
                {
                    var propertyValue = item.GetType().GetProperty(filter.Header)?.GetValue(item)?.ToString();
                    if (propertyValue == null || !selectedOptions[filter.Header].Contains(propertyValue))
                    {
                        return false;
                    }
                }
            }

            return true;
        }).ToList();
        FilteredItemsChanged.InvokeAsync(filteredItems);
        StateHasChanged();
    }

    private void ApplySearch()
    {
        if (Items == null)
        {
            filteredItems = new List<TItem>();
            return;
        }

        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredItems = Items.ToList();
        }
        else
        {
            var searchResults = Items.Where(item =>
            {
                var propertyValues = typeof(TItem).GetProperties()
                                                    .Select(prop => prop.GetValue(item)?.ToString())
                                                    .ToList();

                return propertyValues.Any(value => value != null && value.IndexOf(searchText, StringComparison.OrdinalIgnoreCase) >= 0);
            }).ToList();

            filteredItems = searchResults;
        }

        if (filteredItems.Count > 0)
        {
            FilteredItemsChanged.InvokeAsync(filteredItems);
        }

        StateHasChanged();
    }
}
