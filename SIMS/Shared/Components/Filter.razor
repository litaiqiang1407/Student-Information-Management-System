@typeparam TItem
@using SIMS.Shared.Models
@using System.Text.Json

<div class="container row">
    <div class="filter col col-lg-6">
        <button class="filter-button" >
            <i class="bi bi-funnel filter-icon"></i>
            <span class="filter-label">Filter</span>
        </button>

        @foreach (var filter in Filters)
        {
            <div class="filter-item-wrapper">
                <button class="filter-item filter-button" @onclick="ShowFilterItem">
                    <span class="filter-label">@filter.Header</span>
                    <i class="@filterIcon show-icon"></i>
                </button>
                <div class="filter-select-wrapper @(showFilter ? "show" : "hide")">
                    <ul class="filter-select">
                        @foreach (var option in filter.Options)
                        {
                            <li class="filter-option">
                                <input type="checkbox" id="@($"checkbox-{filter.Header}-{option}")" class="filter-checkbox"
                                       value="@option" @onchange="() => OnOptionChanged(filter, option)" />

                                <label for="@($"checkbox-{filter.Header}-{option}")" class="filter-label">@option</label>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }     
    </div>
    <div class="search col col-lg-6">
        <div class="search-field">
            <i class="bi bi-search search-icon"></i>
            <input type="text" class="search-input" placeholder="Search for anything....." />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<Filters<TItem>> Filters { get; set; }

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<TItem>> FilteredItemsChanged { get; set; }

    private List<TItem> filteredItems;

    private bool showFilter = false;

    private string filterIcon => showFilter ? "bi bi-caret-up-fill" : "bi bi-caret-down-fill";

    private Dictionary<string, List<string>> selectedOptions = new Dictionary<string, List<string>>();

    private void ShowFilterItem()
    {
        showFilter = !showFilter;
    }

    protected override void OnInitialized()
    {
        if (Items != null)
        {
            filteredItems = Items.ToList();
        }

    }

    private void OnOptionChanged(Filters<TItem> filter, string option)
    {
        if (!selectedOptions.ContainsKey(filter.Header))
        {
            selectedOptions[filter.Header] = new List<string>();
        }

        if (selectedOptions[filter.Header].Contains(option))
        {
            selectedOptions[filter.Header].Remove(option);
        }
        else
        {
            selectedOptions[filter.Header].Add(option);
        }

        ApplyFilters();

    }

    private void ApplyFilters()
    {
        if (Items == null)
        {
            filteredItems = new List<TItem>();
            return;
        }

        filteredItems = Items.Where(item =>
        {
            foreach (var filter in Filters)
            {
                if (selectedOptions.ContainsKey(filter.Header) && selectedOptions[filter.Header].Count > 0)
                {
                    var propertyValue = item.GetType().GetProperty(filter.Header)?.GetValue(item)?.ToString();
                    if (propertyValue == null || !selectedOptions[filter.Header].Contains(propertyValue))
                    {
                        return false;
                    }
                }
            }
            return true;
        }).ToList();
        FilteredItemsChanged.InvokeAsync(filteredItems);
        StateHasChanged();
    }
}
