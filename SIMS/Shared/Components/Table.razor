@typeparam TItem

<div class="container">
    @* Table *@
    <div class="table-responsive table-container">
        <table class="table table-bordered table-hover">
            <thead class="table-head">
                <tr>
                    <th class="table-header">NO.</th>
                    @foreach (var col in Columns)
                    {
                        <th class="table-header">@col.Header</th>
                    }
                    <th class="table-header">Actions</th>
                </tr>
            </thead>
            <tbody class="table-group-divider">
                @foreach (var (item, index) in Data.Select((value, i) => (value, i)))
                {
                    <tr>
                        <td>@(index + 1)</td>
                        @foreach (var col in Columns)
                        {
                            <td>@col.Value(item)</td>
                        }
                        <td>
                            <div class="button-group">
                                <button class="update-button" @onclick="@(() => UpdateItem(item))">
                                    <i class="bi bi-pencil-square update-icon"></i>
                                </button>
                                <button class="delete-button" @onclick="@(() => DeleteItem(item))">
                                    <i class="bi bi-x-square delete-icon"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public IEnumerable<TItem> Data { get; set; }

    [Parameter]
    public List<TableColumn<TItem>> Columns { get; set; }

    [Parameter]
    public EventCallback<TItem> OnDelete { get; set; }

    private void UpdateItem(TItem item)
    {
        // Implement your update logic here
        Console.WriteLine($"Update item: {item}");
    }

    private async Task DeleteItem(TItem item)
    {
        await OnDelete.InvokeAsync(item);
    }

}
