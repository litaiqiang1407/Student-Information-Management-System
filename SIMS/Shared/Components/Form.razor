@page "/addedit/{Mode}/{Id?}"
@layout SIMS.Shared.Layouts.MainLayout
@inject SIMS.Shared.Functions.DatabaseInteractionFunctions DatabaseFunctions
@inject IWebHostEnvironment env
@inject HttpClient Http
@using Newtonsoft.Json
@using System.Text
@using System.Net;
@using System.Net.Http.Headers;

<div class="bordered-container">
    <div class="container">
        <UploadPhoto PhotoUrl="@photoUrl" PhotoUrlChanged="OnPhotoUrlChanged" OnFileSelected="OnFileSelected" />
        <div class="form-group">
            <div class="input-container">
                <label for="member-code">Member Code</label>
                <input type="text" id="member-code" placeholder="Enter member code..." class="input-field" @bind="MemberCode" />
            </div>
            <div class="input-container">
                <label for="email">Email</label>
                <input type="email" id="email" placeholder="Enter email..." class="input-field" @bind="Email" />
            </div>
        </div>
        <div class="form-group">
            <div class="input-container">
                <label for="name">Name</label>
                <input type="text" id="name" placeholder="Enter name..." class="input-field" @bind="Name" />
            </div>
            <div class="input-container">
                <label for="role">Role</label>
                <select id="role" class="input-field" @bind="Role">
                    <option value="" disabled selected>Choose a role...</option>
                    <option value="Student">Student</option>
                    <option value="Admin">Admin</option>
                    <option value="Lecture">Lecture</option>
                </select>
            </div>
        </div>
        <button class="btn btn-primary custom-button" @onclick="HandleSubmit">@ButtonText</button>

        @if (!string.IsNullOrEmpty(NotificationMessage))
        {
            <div class="alert alert-@(NotificationSuccess ? "success" : "danger")" role="alert">
                @NotificationMessage
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Mode { get; set; }

    [Parameter]
    public string Id { get; set; }

    private string ButtonText => Mode == "add" ? "ADD" : "UPDATE";
    private string photoUrl;
    private string filePath;

    private string MemberCode { get; set; }
    private string Email { get; set; }
    private string Name { get; set; }
    private string Role { get; set; }

    private string NotificationMessage { get; set; }
    private bool NotificationSuccess { get; set; }
    private IBrowserFile selectedFile;

    private UserInfos userInfo;

    protected override async Task OnParametersSetAsync()
    {
        if (Mode == "edit" && !string.IsNullOrEmpty(Id))
        {
            // Load data for editing using Id
            await LoadItemAsync(Id);
        }
    }

    private async Task LoadItemAsync(string id)
    {
        try
        {
            // Call the API to get user details based on the provided Id
            userInfo = await DatabaseFunctions.LoadSingleData<UserInfos>($"api/Admin/UserInfos/{id}");

            if (userInfo != null)
            {
                // Assign the retrieved data to the form fields
                MemberCode = userInfo.MemberCode;
                Email = userInfo.Email;
                Name = userInfo.Name;
                Role = userInfo.RoleName; // Assuming RoleName is the role name; adjust if needed
                photoUrl = userInfo.OfficialAvatar; // Update the photo URL if necessary
            }
            else
            {
                // Notify the user if no data is found for the given Id
                NotificationMessage = "No data found for the given ID.";
                NotificationSuccess = false;
            }
        }
        catch (Exception ex)
        {
            // Handle any errors that occur during the API call
            NotificationMessage = $"Error occurred: {ex.Message}";
            NotificationSuccess = false;
        }
    }

    private async Task OnPhotoUrlChanged(string newPhotoUrl)
    {
        photoUrl = newPhotoUrl;
    }

    private void OnFileSelected(IBrowserFile file)
    {
        selectedFile = file;
    }

    private async Task SaveFileAsync(IBrowserFile file)
    {
        var uploadsFolder = Path.Combine(env.WebRootPath, "Uploads");
        Directory.CreateDirectory(uploadsFolder);

        var uniqueFileName = $"{Guid.NewGuid()}_{file.Name}";
        filePath = Path.Combine(uploadsFolder, uniqueFileName);

        using var stream = new FileStream(filePath, FileMode.Create);
        await file.OpenReadStream().CopyToAsync(stream);

        filePath = Path.Combine("Uploads", uniqueFileName);
    }
    private async Task HandleSubmit()
    {
        // Check for missing required fields
        if (string.IsNullOrEmpty(Name) || string.IsNullOrEmpty(Role) || string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(MemberCode))
        {
            NotificationMessage = "Please fill out all required fields.";
            NotificationSuccess = false;
            return;
        }

        var formData = new MultipartFormDataContent();

        // Add text fields
        formData.Add(new StringContent(MemberCode), "MemberCode");
        formData.Add(new StringContent(Email), "Email");
        formData.Add(new StringContent(Name), "Name");
        formData.Add(new StringContent(Role), "Role");

        if (selectedFile != null)
        {
            try
            {
                var fileContent = new StreamContent(selectedFile.OpenReadStream(10 * 1024 * 1024)); // Adjust max file size if needed
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);

                formData.Add(fileContent, "ImagePath", selectedFile.Name);
            }
            catch (Exception ex)
            {
                NotificationMessage = $"Error uploading file: {ex.Message}";
                NotificationSuccess = false;
                return;
            }
        }
        else
        {
            formData.Add(new StringContent("https://cdn-icons-png.freepik.com/256/7666/7666584.png"), "ImagePath");
        }

        Console.WriteLine($"MemberCode: {MemberCode}, Email: {Email}, Name: {Name}, Role: {Role}");

        HttpResponseMessage result;

        try
        {
            if (Mode == "edit" && !string.IsNullOrEmpty(Id))
            {
                var updateEndpoint = $"https://localhost:7006/api/Admin/UpdateUserInfos/{Id}";
                result = await Http.PutAsync(updateEndpoint, formData);
            }
            else
            {
                var addEndpoint = "https://localhost:7006/api/Admin/AddAccount";
                result = await Http.PostAsync(addEndpoint, formData);
            }

            if (result.StatusCode == HttpStatusCode.NoContent)
            {
                NotificationMessage = "Operation successful!";
                NotificationSuccess = true;
            }
            else if (result.IsSuccessStatusCode)
            {
                var responseContent = await result.Content.ReadFromJsonAsync<ApiResponse>();
                NotificationMessage = responseContent.Message;
                NotificationSuccess = responseContent.Success;
            }
            else
            {
                var responseContent = await result.Content.ReadAsStringAsync();
                NotificationMessage = $"Failed to process request. Status code: {result.StatusCode}, Response: {responseContent}";
                NotificationSuccess = false;
            }
        }
        catch (Exception ex)
        {
            NotificationMessage = $"Exception occurred: {ex.Message}";
            NotificationSuccess = false;
        }
    }

    public class ApiResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; }
    }
}
