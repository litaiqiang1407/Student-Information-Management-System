@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment env

<div class="upload-photo">
    <label class="photo-icon">
        <img id="photo-preview" src="@photoUrl" alt="Preview" style="@(string.IsNullOrEmpty(photoUrl) ? "display:none;" : "display:block;")" />
        <i class="bi bi-camera"></i>
        <InputFile id="photo-upload" accept="image/*" OnChange="HandleFileSelected" style="opacity: 0; position: absolute; width: 100%; height: 100%; cursor: pointer;" />
    </label>
    <p>Upload Photo</p>
</div>

@code {
    [Parameter]
    public string PhotoUrl { get; set; }
    [Parameter]
    public EventCallback<string> PhotoUrlChanged { get; set; }
    [Parameter]
    public EventCallback<IBrowserFile> OnFileSelected { get; set; } // Add this line
    private IBrowserFile selectedFile;
    private string photoUrl;

    protected override void OnParametersSet()
    {
        photoUrl = PhotoUrl;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (!IsValidImageFile(file))
        {
            photoUrl = null;
            selectedFile = null;
            await PhotoUrlChanged.InvokeAsync(photoUrl);
            await OnFileSelected.InvokeAsync(selectedFile);
            return;
        }

        selectedFile = file;
        photoUrl = await ConvertToBase64Async(file);
        await PhotoUrlChanged.InvokeAsync(photoUrl);
        await OnFileSelected.InvokeAsync(selectedFile);
        StateHasChanged();
    }

    private bool IsValidImageFile(IBrowserFile file)
    {
        return file != null && file.ContentType.StartsWith("image/") && file.Size <= 5 * 1024 * 1024; // File size limit of 5MB
    }

    private async Task<string> ConvertToBase64Async(IBrowserFile file)
    {
        using var stream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(stream);
        var buffer = stream.ToArray();
        return $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }
}
