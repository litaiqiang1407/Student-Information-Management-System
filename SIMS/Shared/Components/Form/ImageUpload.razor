@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment env

<div class="upload-photo">
    <label class="photo-icon">
        <img id="photo-preview" src="@PhotoUrl" alt="Preview" style="@(string.IsNullOrEmpty(PhotoUrl) ? "display:none;" : "display:block;")" />
        <i class="bi bi-camera"></i>
        <InputFile id="photo-upload" accept="image/*" OnChange="HandleFileSelected" style="opacity: 0; position: absolute; width: 100%; height: 100%; cursor: pointer;" />
    </label>
    <p>Upload Photo</p>
</div>

@code {
    [Parameter]
    public string PhotoUrl { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> OnFileSelected { get; set; }

    private IBrowserFile? _file; // Store the file temporarily

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (IsValidImageFile(file))
        {
            _file = file; // Store the file for later use

            // Save the file and get the URL path
            var savedFilePath = await SaveFileAsync();
            PhotoUrl = savedFilePath ?? string.Empty; // Update PhotoUrl to the saved file path

            await OnFileSelected.InvokeAsync(PhotoUrl); // Notify the parent component
        }
        else
        {
            PhotoUrl = string.Empty; // Reset PhotoUrl if the file is invalid
            _file = null; // Clear the file
        }

        StateHasChanged();
    }

    private bool IsValidImageFile(IBrowserFile file)
    {
        return file != null && file.ContentType.StartsWith("image/") && file.Size <= 5 * 1024 * 1024; // File size limit of 5MB
    }

    public async Task<string?> SaveFileAsync()
    {
        if (_file != null)
        {
            var uploadsFolder = Path.Combine(env.WebRootPath, "Uploads");
            Directory.CreateDirectory(uploadsFolder);

            var uniqueFileName = $"{Guid.NewGuid()}_{_file.Name}";
            var filePath = Path.Combine(uploadsFolder, uniqueFileName);

            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await _file.OpenReadStream().CopyToAsync(stream);
            }

            _file = null; // Clear the file temporarily

            // Return the path to the uploaded file with backslashes
            return $@"Uploads\{uniqueFileName}";
        }

        return null;
    }
}
