@using System.Reflection
@using Microsoft.AspNetCore.Components.Forms
@using SIMS.Shared.Components

<div class="bordered-container">
    <div class="container">
        @if (Model != null)
        {
            <ImageUpload PhotoUrl="@photoUrl" OnFileSelected="HandleFileSelected" />

            <div class="form-group">
                @foreach (var property in properties)
                {
                    @if (property.Name.Equals("AccountID", StringComparison.OrdinalIgnoreCase))
                    {
                        continue; // Skip the ID property
                    }

                    <div class="input-container">
                        <label for="@property.Name">@property.Name</label>

                        @if (property.PropertyType == typeof(int))
                        {
                            <input type="number" id="@property.Name" placeholder="Enter @property.Name..." class="input-field" value="@GetPropertyValue(property)?.ToString()" @onchange="(e => SetPropertyValue(property, int.Parse(e.Value.ToString())))" />
                        }
                        else if (property.PropertyType == typeof(DateTime))
                        {
                            var dateValue = GetPropertyValue(property) as DateTime?;
                            var formattedDate = dateValue.HasValue ? dateValue.Value.ToString("yyyy-MM-dd") : string.Empty;
                            var minDate = new DateTime(1753, 1, 1).ToString("yyyy-MM-dd");
                            var maxDate = new DateTime(9999, 12, 31).ToString("yyyy-MM-dd");
                            <input type="date" id="@property.Name" placeholder="Enter @property.Name..." class="input-field"
                                   value="@formattedDate" min="@minDate" max="@maxDate"
                                   @onchange="(e => SetPropertyValue(property, DateTime.Parse(e.Value.ToString())))" />
                        }
                        else if (property.PropertyType == typeof(string))
                        {
                            <input type="text" id="@property.Name" placeholder="Enter @property.Name..." class="input-field" value="@GetPropertyValue(property)" @onchange="(e => SetPropertyValue(property, e.Value.ToString()))" />
                        }
                        else if (property.PropertyType.IsEnum ||
                        (property.PropertyType.IsGenericType &&
                        property.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>) &&
                        property.PropertyType.GetGenericArguments()[0].IsEnum))
                        {
                            var enumType = property.PropertyType.IsGenericType ? property.PropertyType.GetGenericArguments()[0] : property.PropertyType;
                            var value = GetPropertyValue(property)?.ToString() ?? "Other"; // Thiết lập mặc định là "Other"

                            <select id="@property.Name" class="input-field" @onchange="(e => SetPropertyValue(property, e.Value.ToString()))">
                                <option value="" disabled>Select @property.Name...</option>
                                @foreach (var enumValue in Enum.GetValues(enumType))
                                {
                                    <option value="@enumValue.ToString()" selected="@(enumValue.ToString() == value)">@enumValue.ToString()</option>
                                }
                            </select>
                        }
                    </div>
                }
                <button class="btn btn-primary custom-button" @onclick="HandleSubmit">@ButtonText</button>
            </div>

            @if (!string.IsNullOrEmpty(NotificationMessage))
            {
                <ToastComponent Message="@NotificationMessage" IsSuccess="@NotificationSuccess" />
            }
        }
        else
        {
            <p>Model is null.</p>
        }
    </div>
</div>

@code {
    [Parameter]
    public object? Model { get; set; }

    [Parameter]
    public string ButtonText { get; set; } = "Submit";

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public string NotificationMessage { get; set; } = string.Empty;

    [Parameter]
    public bool NotificationSuccess { get; set; } = true;

    private List<PropertyInfo> properties = new List<PropertyInfo>();
    private string photoUrl = string.Empty;

    protected override void OnParametersSet()
    {
        if (Model != null)
        {
            properties = Model.GetType().GetProperties().Where(p => p.CanWrite).ToList();
        }
    }

    private object? GetPropertyValue(PropertyInfo property)
    {
        return property.GetValue(Model);
    }

    void SetPropertyValue(PropertyInfo property, object value)
    {
        if (property.PropertyType.IsEnum ||
            (property.PropertyType.IsGenericType &&
             property.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>) &&
             property.PropertyType.GetGenericArguments()[0].IsEnum))
        {
            var enumType = property.PropertyType.IsGenericType ? property.PropertyType.GetGenericArguments()[0] : property.PropertyType;
            object? enumValue = null;

            if (value != null)
            {
                enumValue = Enum.Parse(enumType, value.ToString());
            }

            property.SetValue(Model, enumValue);
        }
        else
        {
            property.SetValue(Model, Convert.ChangeType(value, property.PropertyType));
        }
    }

    private async Task HandleSubmit()
    {
        await OnSubmit.InvokeAsync();
        NotificationMessage = "Form submitted successfully!";
        NotificationSuccess = true;
        StateHasChanged();
    }

    private void HandleFileSelected(string photoUrl)
    {
        this.photoUrl = photoUrl;
        StateHasChanged(); // Trigger a re-render to update the image preview
    }
}
