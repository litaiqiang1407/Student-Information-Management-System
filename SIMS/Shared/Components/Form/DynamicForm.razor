@using System.Reflection
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Hosting
@using SIMS.Data.Entities.Admin
@inject IWebHostEnvironment env
@inject HttpClient Http
@inject SIMS.Shared.Functions.DatabaseInteractionFunctions DatabaseFunctions

<div class="bordered-container">
    <div class="container">
        @if (Model != null)
        {
            <ImageUpload @ref="imageUpload" PhotoUrl="@photoUrl" OnFileSelected="HandleFileSelected" />

            <div class="form-group">
                @foreach (var property in properties)
                {
                    if (property.Name.Equals("AccountID", StringComparison.OrdinalIgnoreCase) ||
                    property.Name.Equals("DepartmentName", StringComparison.OrdinalIgnoreCase))
                    {
                        continue;
                    }

                    <div class="input-container">
                        <label for="@property.Name">@property.Name</label>
                        @if (property.Name.Equals("Major", StringComparison.OrdinalIgnoreCase) && !hasMajorDropdown)
                        {
                            hasMajorDropdown = true;
                            <select id="@property.Name" class="input-field" @onchange="(e => SetPropertyValue(property, e.Value.ToString()))">
                                <option value="" disabled selected>@(GetPropertyValue(property) == null ? "Select Major..." : "")</option>
                                @foreach (var major in majorList)
                                {
                                    var currentValue = GetPropertyValue(property)?.ToString();
                                    <option value="@major.Name" selected="@(major.Name == currentValue)">@major.Name</option>
                                }
                            </select>
                        }
                        @if (property.Name.Equals("Role", StringComparison.OrdinalIgnoreCase))
                        {
                            <select id="@property.Name" class="input-field" @onchange="(e => SetPropertyValue(property, e.Value.ToString()))">
                                <option value="" disabled selected>@(GetPropertyValue(property) == null ? "Select Role..." : "")</option>
                                @foreach (var role in rolesList)
                                {
                                    var currentValue = GetPropertyValue(property)?.ToString();
                                    <option value="@role.Name" selected="@(role.Name == currentValue)">@role.Name</option>
                                }
                            </select>
                        }
                        else
                        {
                            @switch (Type.GetTypeCode(property.PropertyType))
                            {
                                case TypeCode.Int32:
                                    <input type="number" id="@property.Name" placeholder="Enter @property.Name..." class="input-field"
                                           value="@GetPropertyValue(property)?.ToString()"
                                           @onchange="(e => SetPropertyValue(property, int.Parse(e.Value.ToString())))" />
                                    break;

                                case TypeCode.DateTime:
                                    var dateValue = GetPropertyValue(property) as DateTime?;
                                    var formattedDate = dateValue.HasValue && dateValue.Value > DateTime.MinValue
                                    ? dateValue.Value.ToString("yyyy-MM-dd")
                                    : DateTime.Now.ToString("yyyy-MM-dd");
                                    var minDate = new DateTime(1900, 1, 1).ToString("yyyy-MM-dd");
                                    var maxDate = new DateTime(9999, 12, 31).ToString("yyyy-MM-dd");
                                    <input type="date" id="@property.Name" placeholder="Enter @property.Name..." class="input-field"
                                           value="@formattedDate" min="@minDate" max="@maxDate"
                                           @onchange="(e => SetPropertyValue(property, DateTime.Parse(e.Value.ToString())))" />
                                    break;

                                case TypeCode.String:
                                    <input type="text" id="@property.Name" placeholder="Enter @property.Name..." class="input-field"
                                           value="@GetPropertyValue(property)"
                                           @onchange="(e => SetPropertyValue(property, e.Value.ToString()))" />
                                    break;

                                default:
                                    if (property.PropertyType.IsEnum || (property.PropertyType.IsGenericType &&
                                    property.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>) &&
                                    property.PropertyType.GetGenericArguments()[0].IsEnum))
                                    {
                                        var enumType = property.PropertyType.IsGenericType ? property.PropertyType.GetGenericArguments()[0] : property.PropertyType;
                                        var value = GetPropertyValue(property)?.ToString() ?? "Other";

                                        <select id="@property.Name" class="input-field" @onchange="(e => SetPropertyValue(property, e.Value.ToString()))">
                                            <option value="" disabled>Select @property.Name...</option>
                                            @foreach (var enumValue in Enum.GetValues(enumType))
                                            {
                                                <option value="@enumValue.ToString()" selected="@(enumValue.ToString() == value)">@enumValue.ToString()</option>
                                            }
                                        </select>
                                    }
                                    break;
                            }
                        }
                    </div>
                }

                <button class="btn btn-primary custom-button" @onclick="HandleSubmit">@ButtonText</button>
            </div>

            @if (!string.IsNullOrEmpty(NotificationMessage))
            {
                <ToastComponent Message="@NotificationMessage" IsSuccess="@NotificationSuccess" />
            }
        }
        else
        {
            <p>Model is null.</p>
        }
    </div>
</div>

@code {
    [Parameter]
    public object? Model { get; set; }

    [Parameter]
    public string ButtonText { get; set; } = "Submit";

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public string NotificationMessage { get; set; } = string.Empty;

    [Parameter]
    public bool NotificationSuccess { get; set; } = true;

    private List<PropertyInfo> properties = new List<PropertyInfo>();
    private string photoUrl = string.Empty;
    private ImageUpload? imageUpload; // Reference to ImageUpload component
    private List<Majors> majorList = new List<Majors>();
    private List<Roles> rolesList = new List<Roles>();
    private bool hasMajorDropdown = false;

    protected override async Task OnParametersSetAsync()
    {
        if (Model != null)
        {
            properties = Model.GetType().GetProperties().Where(p => p.CanWrite).ToList();
            var tasks = new List<Task>();

            if (properties.Any(p => p.Name.Equals("Major", StringComparison.OrdinalIgnoreCase)))
            {
                tasks.Add(LoadMajorsAsync());
            }

            if (properties.Any(p => p.Name.Equals("Role", StringComparison.OrdinalIgnoreCase)))
            {
                tasks.Add(LoadRolesAsync());
            }

            var imagePathProperty = properties.FirstOrDefault(p => p.Name.Equals("ImagePath", StringComparison.OrdinalIgnoreCase));
            if (imagePathProperty != null)
            {
                var imagePath = GetPropertyValue(imagePathProperty) as string;
                photoUrl = string.IsNullOrEmpty(imagePath) ? string.Empty : $"/Uploads/{Path.GetFileName(imagePath)}";
            }

            await Task.WhenAll(tasks);
        }
    }

    private async Task LoadMajorsAsync()
    {
        try
        {
            majorList = (await DatabaseFunctions.LoadData<Majors>("api/Admin/GetMajors")).ToList();
        }
        catch (Exception ex)
        {
            NotificationMessage = $"Error loading majors: {ex.Message}";
            NotificationSuccess = false;
        }
    }

    private async Task LoadRolesAsync()
    {
        try
        {
            rolesList = (await DatabaseFunctions.LoadData<Roles>("api/Admin/GetRoles")).ToList();
        }
        catch (Exception ex)
        {
            NotificationMessage = $"Error loading roles: {ex.Message}";
            NotificationSuccess = false;
        }
    }

    private object? GetPropertyValue(PropertyInfo property)
    {
        return property.GetValue(Model);
    }

    private void SetPropertyValue(PropertyInfo property, object value)
    {
        if (property.PropertyType.IsEnum ||
            (property.PropertyType.IsGenericType &&
             property.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>) &&
             property.PropertyType.GetGenericArguments()[0].IsEnum))
        {
            var enumType = property.PropertyType.IsGenericType ? property.PropertyType.GetGenericArguments()[0] : property.PropertyType;
            object? enumValue = value != null ? Enum.Parse(enumType, value.ToString()) : null;

            property.SetValue(Model, enumValue);
        }
        else
        {
            property.SetValue(Model, Convert.ChangeType(value, property.PropertyType));
        }
    }

    private async Task HandleSubmit()
    {
        string? savedPhotoUrl = imageUpload != null ? await imageUpload.SaveFileAsync() : null;

        var responseStatusCode = await SubmitFormAsync();

        if (responseStatusCode == 204 || responseStatusCode == 200)
        {
            NotificationMessage = "Form submitted successfully!";
            NotificationSuccess = true;

            if (savedPhotoUrl != null)
            {
                var imagePathProperty = properties.FirstOrDefault(p => p.Name.Equals("ImagePath", StringComparison.OrdinalIgnoreCase));
                if (imagePathProperty != null)
                {
                    SetPropertyValue(imagePathProperty, savedPhotoUrl); // Update ImagePath with file URL
                }
            }
        }
        else
        {
            NotificationMessage = "Form submission failed.";
            NotificationSuccess = false;
        }
        await OnSubmit.InvokeAsync();
        StateHasChanged();
    }

    private async Task<int> SubmitFormAsync()
    {
        await Task.Delay(200);
        return 200;
    }

    private async Task HandleFileSelected(string fileUrl)
    {
        photoUrl = fileUrl;
        StateHasChanged();
    }
}
